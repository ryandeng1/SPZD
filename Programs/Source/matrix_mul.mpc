# (C) 2018 University of Bristol. See License.txt
# coding: latin-1
"""
  Solve Bankers bonus, aka Millionaires problem.
  to deduce the maximum value from a range of integer input.

  Demonstrate clients external to computing parties supplying input and receiving an authenticated result. See bankers-bonus-client.cpp for client (and setup instructions).

  For an implementation with communications security see bankers_bonus_commsec.mpc.
  
  Wait for MAX_NUM_CLIENTS to join the game or client finish flag to be sent
  before calculating the maximum.

  Note each client connects in a single thread and so is potentially blocked.
  
  Each round / game will reset and so this runs indefinitiely.
"""

from Compiler.types import sint, regint, Array, MemValue
from Compiler.instructions import listen, acceptclientconnection
from Compiler.library import print_ln, do_while, for_range
from Compiler.util import if_else

PORTNUM = 14000
MAX_NUM_CLIENTS = 2
NUM_ROWS = 10
NUM_COLS = 10

def accept_client_input():
    """
    Wait for socket connection, send share of random value, receive input and deduce share.
    Expect 3 inputs: unique id, bonus value and flag to indicate end of this round.
    """
    client_socket_id = regint()
    
    acceptclientconnection(client_socket_id, PORTNUM)


    print_ln("CLIENT RECEIVED")

    client_inputs = sint.receive_from_client(1 + NUM_ROWS * NUM_COLS, client_socket_id)
    finish = client_inputs[0].reveal()
    matrix = Array(NUM_ROWS * NUM_COLS, sint)
    for i in range(1, NUM_ROWS * NUM_COLS + 1):
    	matrix[i - 1] = client_inputs[i]
    
    
    return client_socket_id, matrix, finish


def multiply_matrices(left_matrix, right_matrix):
  result_matrix = Array(NUM_ROWS * NUM_COLS, sint)
  @for_range(NUM_ROWS * NUM_COLS)
  def range_body(i):
    result_matrix[i] = 0
  @for_range(NUM_ROWS)
  def range_body(i):
    @for_range(NUM_COLS)
    def range_body(j):
      @for_range(NUM_COLS)
      def range_body(k):
        result_matrix[i * NUM_COLS + j] += left_matrix[i * NUM_COLS + k].reveal() * right_matrix[k * NUM_COLS + j].reveal()
  return result_matrix
  


def write_matrix_to_clients(sockets, number_clients, matrix):
  rnd_from_triple = sint.get_random_triple()[0]
  @for_range(number_clients)
  def loop_body(i):
    @for_range(NUM_ROWS * NUM_COLS)
    def loop_body(j):
      auth_result = matrix[j] * rnd_from_triple
      sint.write_shares_to_socket(sockets[i], [matrix[j], rnd_from_triple, auth_result])




def main():
    """Listen in while loop for players to join a game.
    Once maxiumum reached or have notified that round finished, run comparison and return result."""
    # Start listening for client socket connections
    listen(PORTNUM)
    print_ln('Listening for client connections on base port %s', PORTNUM)

    @do_while
    def game_loop():
      print_ln('Starting one round of Matrix Multiplication')

	    # Clients socket id (integer).
      client_sockets = Array(MAX_NUM_CLIENTS, regint)
	    # Number of clients
      number_clients = MemValue(regint(0))


	    # Client ids to identity client
      client_ids = Array(MAX_NUM_CLIENTS, sint)


	    #Make result an identity matrix
      result = Array(NUM_ROWS * NUM_COLS, sint)
      for i in range(NUM_ROWS):
        result[i * NUM_COLS + i] = 1


	    # Loop round waiting for each client to connect


      """
      @do_while
      def client_connections():
        client_sockets[number_clients], matrix, finish = accept_client_input()
        print_ln("Finish")
        print_ln('%s', finish.reveal())
        intermediate = multiply_matrices(result, matrix)
        for i in range(NUM_ROWS * NUM_COLS):
          result[i] = intermediate[i]
        number_clients.write(number_clients+1)
        print(number_clients)
        return finish.reveal() == 0
      """
      @for_range(2)
      def client_connections(i):
        client_sockets[number_clients], matrix, finish = accept_client_input()
        print_ln("Finish")
        print_ln('%s', finish.reveal())
        intermediate = multiply_matrices(result, matrix)
        print_ln("Multipled the matrices")
        for i in range(NUM_ROWS * NUM_COLS):
          result[i] = intermediate[i]
          print_ln('%s', result[i].reveal())
        number_clients.write(number_clients+1)
	    

      for i in range(NUM_ROWS*NUM_COLS):
        print(result[i])
      write_matrix_to_clients(client_sockets, number_clients, result)
      
    return True


main()
