#program.set_bit_length(640)
print(program.bit_length)
program.set_bit_length(512)
# Returns a mod b
# Uses binary search to make things faster
def smod(a, b):
    print_ln("%s %s", a.reveal(), b.reveal())
    print_ln("Less than")
    print_ln("%s", (a < b).reveal())
    print_ln("Greater than")
    print_ln("%s", (a >= b).reveal())
    result = MemValue(sint(a))
    if_then((a >= b).reveal())
    print_ln("a is greater than b I assume?")
    left, right = MemValue(sint(0)), MemValue(a)
    mid = MemValue(sint(0))
    @while_do(lambda i: (left.read() < right.read()).reveal(), regint(0))
    def loop_body(i):
    	if_then(((left.read() + right.read()) % 2 == sint(0)).reveal())
    	mid.write((left.read() + right.read()) / sint(2))
    	else_then()
    	mid.write((left.read() + right.read() - sint(1)) / sint(2))
    	end_if()
    	if_then((a - mid.read() * b >= b).reveal())
    	left.write(mid.read() + sint(1))
    	else_then()
    	right.write(mid.read())
    	end_if()
    	return i
    result.write(a - left.read() * b)
    end_if()
    return result.read()



# Returns a^b mod n where a, b, n are all of type sint.
# Assume that b >= 0
def spow(a, b, n):
    result = MemValue(sint(1))
    mem_b = MemValue(b)
    counter = MemValue(cint(0))
    @while_do(lambda i: (mem_b.read() > 0).reveal(), regint(0))
    def loop_body(i):
	counter.write(counter.read() + cint(1))
	print_ln("%s %s", "spow iteration", counter.read())
        print_ln("%s %s", "Exponent ", mem_b.read().reveal())
        if_then(((mem_b.read() % 2) == sint(0)).reveal())
	print_ln("%s %s", "Result", result.read().reveal())
        print_ln("%s %s", "Result squared", (result.read().square()).reveal())
        result.write(smod(result.read().square(), n))
        mem_b.write(mem_b.read() / sint(2))
        else_then()
        mem_b.write(mem_b.read() - sint(1))
        result.write(smod(result.read() * a, n))
        end_if()
        return i

    return result.read()

num_bits = 128

a = sint.get_random_int(num_bits)
b = sint.get_random_int(num_bits)
c = sint.get_random_int(num_bits)
@for_range(10)
def loop_body(i):
    print_ln("Hello world")
print_ln("%s", a.reveal())
print_ln("%s", b.reveal())
print_ln("%s", c.reveal())
#print_ln("%s", (a * b * c).reveal())

start_timer(1)
print_ln("%s", spow(a, b, c).reveal())
stop_timer(1)

"""
start_timer(2)
print_ln("%s", spow(a, b, c).reveal())
stop_timer(2)
"""




