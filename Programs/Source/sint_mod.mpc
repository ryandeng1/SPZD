print(type(sint(5) < sint(3)))
# Returns a mod b
# Uses binary search to make things faster
<<<<<<< HEAD
def smod(a, b):
	k = MemValue(sint(0))
	left, right = MemValue(sint(0)), MemValue(a)
	@while_do(lambda i: (left.read() < right.read()).reveal(), regint(0))
=======
def mod(a, b):
    left, right = MemValue(sint(0)), MemValue(a)
    mid = MemValue(sint(0))
    @while_do(lambda i: (left.read() < right.read()).reveal(), regint(0))
>>>>>>> 0823c680cb60442c03fdf7bf87a3b85b791c5ff7
    def loop_body(i):
    	if_then(((left.read() + right.read()) % 2 == sint(0)).reveal())
    	mid.write((left.read() + right.read()) / sint(2))
    	else_then()
    	mid.write((left.read() + right.read() - sint(1)) / sint(2))
    	end_if()
    	if_then((a - mid.read() * b >= b).reveal())
    	left.write(mid.read() + sint(1))
    	else_then()
    	right.write(mid.read())
    	end_if()
    	return i
    return a - left.read() * b




# Returns a mod n, where a and b are of type sint.
def smod2(a, n):
    mem_a = MemValue(a)
    @while_do(lambda i: (mem_a.read() > n).reveal(), regint(0))
    def loop_body(i):
        mem_a.write(mem_a.read() - n)
        return i    
    return mem_a.read()


# Returns a^b mod n where a, b, n are all of type sint.
# Assume that b >= 0
def spow(a, b, n):
    result = MemValue(sint(1))
    mem_b = MemValue(b)
    @while_do(lambda i: (mem_b.read() > 0).reveal(), regint(0))
    def loop_body(i):
        if_then(((b % 2) == sint(0)).reveal())
        result.write(smod(result.read() * result.read(), n))
        mem_b.write(mem_b.read() / sint(2))
        else_then()
        mem_b.write(mem_b.read() - sint(1))
        result.write(smod(result.read() * a, n))
        end_if()
        return i

    return result.read()



# Returns a^b mod n where a, b, n are all of type sint.
# Assume that b >= 0
def spow2(a, b, n):
    result = MemValue(sint(1))
    mem_b = MemValue(b)
    @while_do(lambda i: (mem_b.read() > 0).reveal(), regint(0))
    def loop_body(i):
        if_then(((b % 2) == sint(0)).reveal())
        result.write(smod2(result.read() * result.read(), n))
        mem_b.write(mem_b.read() / sint(2))
        else_then()
        mem_b.write(mem_b.read() - sint(1))
        result.write(smod2(result.read() * a, n))
        end_if()
        return i

    return result.read()


num_bits = 128

a = sint.get_random_int(num_bits).abs()
b = sint.get_random_triple(num_bits).abs()
c = sint.get_random_triple(num_bits).abs()
@for_range(10)
def loop_body(i):
    print_ln("Hello world")
start_timer(1)
print_ln("%s", spow(a, b, c).reveal())
end_timer(1)


start_timer(2)
print_ln("%s", spow2(a, b, c).reveal())
end_timer(2)





