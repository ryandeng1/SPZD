program.set_bit_length(512 - 50)

# Finds inverse of a mod b
def inverse(a, b):
    r, s, _ = extended_euclidean_algorithm(a, b)
    """
    if r != 1:
    raise ZeroDivisionError('invert() no inverse exists')
    """
    # s % b
    return smod(s, b) 
    






# TODO: Work on Extended Euclid's Algorithm to find modular inverse, mainly need the floor function to work.
def extended_euclidean_algorithm(a, b):
    """Extended Euclidean algorithm
    Returns r, s, t such that r = s*a + t*b and r is gcd(a, b)
    See <https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm>
    """
    r0, r1 = MemValue(a), MemValue(b)
    s0, s1 = MemValue(sint(1)), MemValue(sint(0))
    t0, t1 = MemValue(sint(0)), MemValue(sint(1))
    @while_do(lambda i: (r1.read() != sint(0)).reveal(), regint(0))
    def loop(i):
        q = floor(r0.read(), r1.read())
        temp = MemValue(r0.read())
        r0.write(r1.read())
        r1.write(temp.read() - q * r1.read())
	temp2 = MemValue(s0.read())
	s0.write(s1.read())
        s1.write(temp2.read() - q * s1.read())
	temp3 = MemValue(t0.read())
        t0.write(t1)
        t1.write(temp3.read() - q * t1.read())
	print_ln("%s %s", "r1:", r1.read().reveal())
        return i
    return r0.read(), s0.read(), t0.read()


# Returns a // b, in which a and b are secret-shared values.
def floor(a, b):
    result = MemValue(sint(0))
    if_then((a >= b).reveal())
    left, right = MemValue(sint(0)), MemValue(a)
    mid = MemValue(sint(0))
    @while_do(lambda i: (left.read() < right.read()).reveal(), regint(0))
    def loop_body(i):
        mid.write((left + right) >> sint(1))
	if_then((a - mid.read() * b - b>= sint(0)).reveal())
        left.write(mid.read() + sint(1))
        else_then()
        right.write(mid.read())
        end_if()
        return i
    result.write(left.read())
    end_if()
    print_ln("%s %s %s %s", "A", a.reveal(), "B", b.reveal())
    print_ln("%s %s", "a // b", result.read().reveal())
    return result.read()

def smod(a, b):
    result = MemValue(sint(0))
    if_then((a >= 0).reveal())
    fl = floor(a, b)
    result.write(a - fl * b)    
    else_then()
    result.write(smod_neg(a, b))
    end_if()
    return result.read()


# Used when a is negative
def smod_neg(a, b):
    left = MemValue(sint(0))
    right = MemValue(sint(-1) * a)
    mid = MemValue(sint(0))
    @while_do(lambda i: (left.read() < right.read()).reveal(), regint(0))
    def loop_body(i):
        mid.write((left + right) >> sint(1))
	if_then((a + mid.read() * b >= sint(0)).reveal())
	right.write(mid.read())
	else_then()
	left.write(mid.read() + sint(1))
	end_if()
	return i
    return a + left.read() * b
	




def convert_in(reducer_bits, x, n):
    return smod(x << reducer_bits, n) 

def convert_out(r_inverse, x, n):
    print_ln("%s", (r_inverse * x).reveal())
    return smod(r_inverse * x, n)


def multiply(reducer_bits, reducer, mask, r_inverse, factor, converted, x, y, n):
    product = (x * y).reveal()
    temp = ((product & mask) * factor) & mask
    reduced = (product + temp * n) >> reducer_bits
    cond = (reduced < n).reveal()
    result = cond.if_else(reduced, reduced - n)
    print(type(result))
    return result


def spow_helper(reducer_bits, reducer, mask, r_inverse, factor, converted, x, y, n):
    z = MemValue(converted)
    mem_y = MemValue(y)
    mem_x = MemValue(x)
    @while_do(lambda i: (mem_y.read() != sint(0)).reveal(), regint(0))
    def loop_body(i):
	print_ln("Hello")
	print_ln("%s", mem_y.read().reveal())
	if_then((mem_y.read() % 2 != sint(0)).reveal())
        z.write(multiply(reducer_bits, reducer, mask, r_inverse, factor, converted, z.read(), mem_x.read(), n))
	end_if()
	mem_x.write(multiply(reducer_bits, reducer, mask, r_inverse, factor, converted, mem_x.read(), mem_x.read(), n))
	mem_y.write(mem_y.read() >> sint(1))
	print_ln("%s", z.read().reveal())
	return i
    print_ln("Done with loop")
    return z.read()



def spow(a, b, n):
    # first compute r, r must be a power of 2, let r be 16 for now.
    reducer_bits = sint(136) # (128 // 8 + 1) * 8, here our modulus is 128 bits as we are generating 128 bit primes???
    reducer = sint(1) << reducer_bits
    mask = (reducer - sint(1)).reveal()
    r_inverse = inverse(smod(reducer, n), n)
    factor = floor(reducer * r_inverse - 1, n).reveal()
    print_ln("%s", factor)
    converted = smod(reducer, n)
    converted_a = convert_in(reducer_bits, a, n)
#    converted_b = convert_in(reducer_bits, b, n)
    print_ln("%s %s %s %s %s %s", reducer_bits.reveal(), reducer.reveal(), mask.reveal(), r_inverse.reveal(), factor.reveal(), converted.reveal())
    result =  spow_helper(reducer_bits, reducer, mask, r_inverse, factor, converted, converted_a, b, n)
    return convert_out(r_inverse, result, n)





a = sint(255972849885399187564518654977146894230)
b = sint(224744354023306270264845723747260911762)
c = sint(221354279714695536125122539251552175179)

#triple = extended_euclidean_algorithm(a, b)
#print_ln("%s %s %s %s %s", a.reveal(), b.reveal(), triple[0].reveal(), triple[1].reveal(), triple[2].reveal())
print_ln("%s %s %s", a.reveal(), b.reveal(), c.reveal())

# test floor 
#d = sint(7588550360256754183279148073529370729071814602761488244643245601643092331420712959)
#print_ln("%s %s", "FLoor", floor(d, c).reveal())


start_timer(1)
print_ln("%s %s %s %s", a.reveal(), b.reveal(), c.reveal(), spow(a, b, c).reveal())
stop_timer(1)







