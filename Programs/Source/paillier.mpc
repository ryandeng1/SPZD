from Compiler.types import sint, regint, Array, MemValue
from Compiler.instructions import listen, acceptclientconnection
from Compiler.library import print_ln, do_while, for_range
from Compiler.util import if_else
from Compiler import library

prime_length = 128
PORTNUM = 14000
program.set_bit_length(384)


# n and g are public keys for Paillier, lambda and mu are secret keys in Paillier.
def keygen(prime_length):
    p, q = get_prime_pair(prime_length)
    n = p * q
    g = n + 1
    lam = (p - 1) * (q - 1)
    mu = inverse(lam, n) % n
    return n, g, lam, mu










"""
Here begins all the tools required for raw prime generation. 
    - Uses Miller Rabin for primality testing
    - Uses Montgomery multiplication for modular exponentation (a^b mod n)
    - VERY PAINFUL :(

"""


# Finds inverse of a mod b
def inverse(a, b):
    r, s, _ = extended_euclidean_algorithm(a, b)
    """
    if r != 1:
    raise ZeroDivisionError('invert() no inverse exists')
    """
    # s % b
    return smod(s, b) 
    

# TODO: Work on Extended Euclid's Algorithm to find modular inverse, mainly need the floor function to work.
def extended_euclidean_algorithm(a, b):
    """Extended Euclidean algorithm
    Returns r, s, t such that r = s*a + t*b and r is gcd(a, b)
    See <https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm>
    """
    r0, r1 = MemValue(a), MemValue(b)
    s0, s1 = MemValue(sint(1)), MemValue(sint(0))
    t0, t1 = MemValue(sint(0)), MemValue(sint(1))
    @while_do(lambda i: (r1.read() != sint(0)).reveal(), regint(0))
    def loop(i):
        q = floor(r0.read(), r1.read())
        temp = MemValue(r0.read())
        r0.write(r1.read())
        r1.write(temp.read() - q * r1.read())
        temp2 = MemValue(s0.read())
	s0.write(s1.read())
        s1.write(temp2.read() - q * s1.read())
        temp3 = MemValue(t0.read())
        t0.write(t1)
        t1.write(temp3.read() - q * t1.read())
        return i
    return r0.read(), s0.read(), t0.read()


# Returns a // b, in which a and b are secret-shared values.
def floor(a, b):
    result = MemValue(sint(0))
    if_then((a >= b).reveal())
    left, right = MemValue(sint(0)), MemValue(a)
    mid = MemValue(sint(0))
    @while_do(lambda i: (left.read() < right.read()).reveal(), regint(0))
    def loop_body(i):
        mid.write((left + right) >> sint(1))
        if_then((a - mid.read() * b - b>= sint(0)).reveal())
	print_ln("%s %s %s %s %s", "In floor", (a-mid.read() * b - b).reveal(), a.reveal(), b.reveal(), mid.read().reveal())
        left.write(mid.read() + sint(1))
        else_then()
        right.write(mid.read())
        end_if()
        return i
    result.write(left.read())
    end_if()
    return result.read()

def smod(a, b):
    result = MemValue(sint(0))
    if_then((a >= 0).reveal())
    fl = floor(a, b)
    result.write(a - fl * b)    
    else_then()
    result.write(smod_neg(a, b))
    end_if()
    return result.read()


# Used when a is negative
def smod_neg(a, b):
    left = MemValue(sint(0))
    right = MemValue(sint(-1) * a)
    mid = MemValue(sint(0))
    @while_do(lambda i: (left.read() < right.read()).reveal(), regint(0))
    def loop_body(i):
        mid.write((left + right) >> sint(1))
        if_then((a + mid.read() * b >= sint(0)).reveal())
        right.write(mid.read())
        else_then()
        left.write(mid.read() + sint(1))
        end_if()
        return i
    return a + left.read() * b
    




def convert_in(reducer_bits, x, n):
    return smod(x << reducer_bits, n) 

def convert_out(r_inverse, x, n):
    print_ln("%s %s %s %s", r_inverse.reveal(), x.reveal(), n.reveal(), "HAHAHA")
    return smod(r_inverse * x, n)


def multiply(reducer_bits, reducer, mask, r_inverse, factor, converted, x, y, n):
    product = (x * y).reveal()
    temp = ((product & mask) * factor) & mask
    reduced = (product + temp * n) >> reducer_bits
    cond = (reduced < n).reveal()
    result = cond.if_else(reduced, reduced - n)
    return result


def spow_helper(reducer_bits, reducer, mask, r_inverse, factor, converted, x, y, n):
    z = MemValue(converted)
    mem_y = MemValue(y)
    mem_x = MemValue(x)
    @while_do(lambda i: (mem_y.read() != sint(0)).reveal(), regint(0))
    def loop_body(i):
	print_ln("%s %s", "Hello", z.read().reveal())
        if_then((mem_y.read() % 2 != sint(0)).reveal())
        z.write(multiply(reducer_bits, reducer, mask, r_inverse, factor, converted, z.read(), mem_x.read(), n))
        end_if()
        mem_x.write(multiply(reducer_bits, reducer, mask, r_inverse, factor, converted, mem_x.read(), mem_x.read(), n))
        mem_y.write(mem_y.read() >> sint(1))
        return i
    print_ln("Done with loop for spow")
    return z.read()



def spow(a, b, n):
    # first compute r, r must be a power of 2, let r be 16 for now.
    reducer_bits = sint(24) # (128 // 8 + 1) * 8, here our modulus is 128 bits as we are generating 128 bit primes???
    reducer = sint(1) << reducer_bits
    mask = (reducer - sint(1)).reveal()
    r_inverse = inverse(smod(reducer, n), n)
    factor = floor(reducer * r_inverse - 1, n).reveal()
    #print_ln("%s", factor)
    converted = smod(reducer, n)
    converted_a = convert_in(reducer_bits, a, n)
    result =  spow_helper(reducer_bits, reducer, mask, r_inverse, factor, converted, converted_a, b, n)
    # Convert montgomery form to regular form and mod it by n.
    return convert_out(r_inverse, result, n)



# Check if a number is prime or not.
def isPrime(n, num_bits):
    print_ln("%s %s", "Prime candidate", n.reveal())
    lowPrimes =  [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53] #,59,61,67,71,73,79,83,89,97]
    """
                   ,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179
                   ,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269
                   ,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367
                   ,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461
                   ,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571
                   ,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661
                   ,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773
                   ,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883
                   ,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997]
    """
    divides_low_primes = MemValue(sint(0))
    for i in range(len(lowPrimes)):
        print_ln("%s %s", "Checking if multiples of low primes iteration ", i)
        if_then((smod(n, sint(lowPrimes[i])) == sint(0)).reveal())
	print_ln("%s %s", "Candidate is a multiple of ", lowPrimes[i])
        divides_low_primes.write(sint(1)) 
        end_if()

    is_prime = MemValue(sint(1))
    if_then((divides_low_primes.read() == sint(1)).reveal())
    print_ln("%s", "Is a multiple of a low prime")
    is_prime.write(sint(0))
    end_if()
    if_then((((n >=  sint(3)) +  (is_prime.read() == sint(1))) == sint(2)).reveal())
    x = rabinMiller(n, num_bits)
    is_prime.write(x)
    end_if()
    print_ln("Finished isPrime")
    return is_prime.read()


# Based on https://langui.sh/2009/03/07/generating-very-large-primes/
# n is the prime to be tested, num_bits is the number of bits that n has
def rabinMiller(n, num_bits):
    is_prime = MemValue(sint(1))
    mem_s = MemValue(sint(n - 1))
    t = MemValue(sint(0))
    @while_do(lambda z: (mem_s.read() % 2 == sint(0)).reveal(), regint(0))
    def loop_body(i):
	print_ln("%s %s", "Hopefully s is even", mem_s.read().reveal())
	mem_s.write(mem_s.read() >> sint(1))
        t.write(t.read() + sint(1))
	return i

    print_ln("%s %s", "t:", t.read().reveal())
    print_ln("%s %s", "s:", mem_s.read().reveal())
    k = MemValue(cint(0))
    print_ln("%s", "Finished first while loop of miller rabin")
    @while_do(lambda i: ((k.read() < cint(64)) + (is_prime.read() == sint(1)) == sint(2)).reveal(), regint(0))
    def loop_body(i):
	print_ln("%s %s", "Rabin Millier Iteration", k.read())
        ran = smod(sint.get_random_int(num_bits), n) 
        val = MemValue(spow(ran, mem_s.read(), n))
        if_then((val != sint(1)).reveal())
        index = MemValue(sint(0))
        @while_do(lambda j: ((val.read() != (n - sint(1))) + (is_prime.read() == sint(1)) == sint(2)).reveal(), regint(0))
        def f(j):
            if_then((index.read() == t.read() - 1).reveal())
	    print_ln("%s %s", n.reveal(), " is not prime")
            is_prime.write(sint(0))
            else_then()
            index.write(index.read() + cint(1))
            val.write(smod(val.read().square(), n))
	    print_ln("%s %s", "v", val.read().reveal())
            end_if()
            return j
        end_if()
        k.write(k.read() + 2)
        return i
    print_ln("Should exit the loop")
    return is_prime.read()



# Generate a prime of n bits
def generate_prime(n):
    # testing mode, later change to 10 * n
    num_iterations = cint(80)
    counter = MemValue(cint(0))
    prime = MemValue(sint(0))
    @while_do(lambda i: (((counter.read() < num_iterations) + (prime.read() == sint(0))) == sint(2)).reveal(), regint(0))
    def loop_body(i):
        random_num = sint.get_random_int(n)
        if_then((isPrime(random_num, n) == sint(1)).reveal())
        prime.write(random_num)
        print_ln("%s %s", "Found a prime", random_num.reveal())
        end_if()
	counter.write(counter.read() + cint(1))
	return i
    return prime.read()


def get_prime_pair(prime_length):
	p = generate_prime(prime_length)
	q = MemValue(sint(0))
        q.write(p)
	@while_do(lambda i: (q.read() == p).reveal(), regint(0))
	def loop_body(i):	
		q.write(generate_prime(prime_length))
		print_ln("%s", "One iteration in which q = p")
		return i
	
	return p, q.read()

def generate_strong_prime(prime_length):
    p = MemValue(sint(2))
    @while_do(lambda i: ((isPrime(p.read(), prime_length) + isPrime(sint(2) * p.read() + sint(1), prime_length)) != sint(2)).reveal(), regint(0))
    def loop_body(i):
        print_ln("%s %s", p.read().reveal(), "is not a strong prime")
	p.write(generate_prime(prime_length))
	return i
    return p.read()

# Generates a random multiplicative inverse in the field Z_n where n = (2p + 1)(2q+1)
def generate_ran_inverse(p, q, length):
    ran_p = smod(sint.get_random_int(length), p)
    ran_q = smod(sint.get_random_int(length), q)
    # Assume p != q here, 
    q_inverse = inverse(q, p)
    result = smod(q_inverse * (ran_p - ran_q), p) * q + ran_q
    return result 

    
# Creates a d-degree polynomial with secret s using Shamir secret sharing. Polynomial resides in the field modulo nm.
def shamir(d, s, nm, num_bits):
    coeff = [s]
    for i in range(d):
        print_ln("%s %s", "Length of coeff rn", len(coeff))
	coeff.append(smod(sint.get_random_int(num_bits), nm))
         
    # coeff should have d + 1 entries
    print_ln("%s %s", "How many coefficients", len(coeff))
    print_ln("Coefficients")
    for i in range(len(coeff)):
	print_ln("%s", coeff[i].reveal())

    # Shares 1 through d + 1, leave share 0 empty since polynomial evaluated at 0 would be the secret and that is no good. 
    shares = Array(d + 2, sint)
    @for_range(1, len(shares))
    def loop_body(i):
	shares[i] = eval_polynomial(i, coeff, nm)
    return shares


def eval_polynomial(val, coeff, mod):
    print_ln("Evaluating polynomial")
    result = MemValue(sint(0))
    for i in range(len(coeff)):
	result.write(smod(result.read() + coeff[i] * (val ** i), mod))
        print_ln("%s %s", "coefficient", coeff[i].reveal())
    return result.read()    	
    
    



def paillier(p, q, prime_length):
    #p = generate_strong_prime(prime_length)
    #q = generate_strong_prime(prime_length)
    n = (sint(2) * p + 1) * (sint(2) * q + 1)
    m = p * q
    # Need to pick elements randomly from multiplicative inverse of n. 
    beta = generate_ran_inverse(p, q, prime_length)
    # Difference between choosing once from Z_n* x Z_n* versus twice from Z_n*
    a, b = generate_ran_inverse(p, q, prime_length), generate_ran_inverse(p, q, prime_length)
    print_ln("Finished generating all the inverses")
    print_ln("%s %s %s", "Inverses", a.reveal(), b.reveal())
    # calculate g = (1+n)^a * b^n mod n^2
    n_squared = n.square()
    term_1 = spow((1 + n), a, n_squared)
    print_ln("First spow finished")
    term_2 = spow(b, n, n_squared)
    print_ln("Second spow finished")
    g = smod(term_1 * term_2, n_squared)
    theta = smod(a * beta * m, n)
    secret_key = beta * m
    return n, g, theta, secret_key


# Write public keys to files, write shares of private keys to files as well
def main():
    prime_length = 16
    num_bits = 16
    p = sint(36761)#generate_strong_prime(prime_length)
    q = sint(38039) #strong prime that is 16 bits
    print_ln("%s %s %s", "Strong primes", p.reveal(), q.reveal())
    x = generate_ran_inverse(p, q, prime_length)
    print_ln("%s %s", "Inverse", x.reveal())
    n, g, theta, secret_key = paillier(p, q, prime_length)
    print_ln("%s %s %s %s %s %s %s %s", "n", n.reveal(), "g", g.reveal(), "theta", theta.reveal(), "sk", secret_key.reveal())

    #print_ln("%s %s", "Strong prime", p.reveal())
    lst = shamir(2, sint(5), sint(997), 8)
    print_ln("%s %s", "Len of shamir secrets", len(lst))
    @for_range(len(lst))
    def loop_body(i):
	print_ln("%s %s %s", "Share ", i, lst[i].reveal())

main()


