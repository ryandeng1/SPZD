from Compiler.types import sint, regint, Array, MemValue
from Compiler.instructions import listen, acceptclientconnection
from Compiler.library import print_ln, do_while, for_range
from Compiler.util import if_else
from Compiler import library
import random
import gmpy2


nparties = 4
prime_length = 128
PORTNUM = 14000

# n and g are public keys for Paillier, lambda and mu are secret keys in Paillier.
def keygen(prime_length):
    p, q = get_prime_pair(prime_length)
    n = p * q
    g = n + 1
    lam = (p - 1) * (q - 1)
    mu = inverse(lam, n) % n
    return n, g, lam, mu


# Split the secret keys among n parties using Secret sharing???
def split_secret_key(n, g, lam, mu):
    shares_lambda = Array(nparties, sint)
    shares_mu = Array(nparties, sint)
    sum_lambda = sint(0)
    sum_mu = sint(0)


    # First party has secret lambda + random_num 
    ran_lambda = sint.get_random_triple(prime_length) % n
    ran_mu = sint.get_random_triple(prime_length) % n
    shares_lambda[0] = (lam + ran_lambda) % n
    shares_mu[0] = (mu + ran_mu) % n
    sum_lambda += ran_lambda
    sum_mu += ran_mu

    # Parties 2 to n-1 have a random secret
    @for_range(2, nparties - 1)
    def loop_body(i):
        ran_lambda = sint.get_random_triple(prime_length) % n
        ran_mu = sint.get_random_triple(prime_length) % n
        sum_lambda += ran_lambda
        sum_mu += ran_mu
        shares_lambda[i] = ran_lambda
        shares_mu[i] = ran_mu


    # Last party gets share that is the negative of the previous sum
    shares_lambda[nparties - 1] = (-sum_lambda) % n
    shares_mu[nparties - 1] = (-sum_mu) % n

    return shares_lambda, shares_mu




def get_prime(N):
    randfunc = random.SystemRandom()
    r = gmpy2.mpz(randfunc.getrandbits(N))
    r = gmpy2.bit_set(r, N - 1)
    return sint(int(gmpy2.next_prime(r)))


def get_prime_pair(prime_length):
	p = get_prime(prime_length)
	q = MemValue(sint(0))
        q.write(p)
	@do_while
	def loop_body():	
		q.write(get_prime(prime_length))
		print_ln("%s", "One iteration in which q = p")
		print("here")	
		print(type(q.read()))
		print(type(q.read() == p))
		return (q.read() == p).reveal() == 0
	
	return p, q.read()


# Finds inverse of a mod b
def inverse(a, b):
    r, s, _ = extended_euclidean_algorithm(a, b)
    print(r.reveal())
    """
    if r != 1:
	raise ZeroDivisionError('invert() no inverse exists')
    """
    return s % b
    

# TODO: Work on Extended Euclid's Algorithm to find modular inverse
def extended_euclidean_algorithm(a, b):
    """Extended Euclidean algorithm
    Returns r, s, t such that r = s*a + t*b and r is gcd(a, b)
    See <https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm>
    """
    r0, r1 = MemValue(sint(0)), MemValue(sint(0))
    s0, s1 = MemValue(sint(1)), MemValue(sint(0))
    t0, t1 = MemValue(sint(0)), MemValue(sint(1))
    #r0, r1 = a, b
    #s0, s1 = sint(1), sint(0)
    #t0, t1 = sint(0), sint(1)
    r0.write(a)
    r1.write(b)
    @do_while
    def loop():
        q = r0 / r1
        #r0, r1 = r1, r0 - q*r1
	r0.write(r1)
	r1.write(r0 - q * r1)
        #s0, s1 = s1, s0 - q*s1
	s0.write(s1)
	s1.write(s0 - q * s1)
        #t0, t1 = t1, t0 - q*t1
	t0.write(t1)
	t1.write(t0 - q * t1)
        return r1.reveal() == 0
    return r0, s0, t0





"""
Raw prime generation. WARNING: VERY PAINFUL
"""

# Returns a mod n, where a and b are of type sint.
def smod(a, n):
    mem_a = MemValue(a)
    @while_do(lambda i: (mem_a.read() > n).reveal(), regint(0))
    def loop_body(i):
        mem_a.write(mem_a.read() - n)
        return i    
    return mem_a.read()

# Returns a^b mod n where a, b, n are all of type sint.
# Assume that b >= 0
def spow(a, b, n):
    result = MemValue(sint(1))
    mem_b = MemValue(b)
    @while_do(lambda i: (mem_b.read() > 0).reveal(), regint(0))
    def loop_body(i):
        if_then(((b % 2) == sint(0)).reveal())
        result.write(smod(result.read() * result.read(), n))
        mem_b.write(mem_b.read() / sint(2))
        else_then()
        mem_b.write(mem_b.read() - sint(1))
        result.write(smod(result.read() * a, n))
        end_if()
        return i

    return result.read()




# Check if a number is prime or not.
def isPrime(n, num_bits):
    print_ln("%s %s", "Prime candidate", n)
    lowPrimes =  [3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97
                   ,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179
                   ,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269
                   ,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367
                   ,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461
                   ,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571
                   ,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661
                   ,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773
                   ,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883
                   ,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997]
    
    divides_low_primes = MemValue(cint(0))
    for i in range(len(lowPrimes)):
        if_then(n % cint(lowPrimes[i]) == 0)
	print_ln("%s", lowPrimes[i])
        divides_low_primes.write(1)
        end_if()

    is_prime = MemValue(cint(0))
    if_then(divides_low_primes.read() == cint(1))
    print_ln("%s", "Is a multiple of a low prime")
    is_prime.write(0)
    end_if()
    
    if_then((n >= cint(3) and n & cint(1)) != cint(0))
    x = rabinMiller(n, num_bits)
    is_prime.write(x)
    end_if()
    print_ln("Finished isPrime")
    return is_prime.read()


# Based on https://langui.sh/2009/03/07/generating-very-large-primes/
def rabinMiller(n, num_bits):
    is_prime = MemValue(sint(1))
    mem_s = MemValue(sint(n - 1))
    t = MemValue(cint(0))
    @while_do(lambda z: (mem_s.read() & 2 == sint(0)).reveal(), regint(0))
    def loop_body(i):
        mem_s.write(mem_s.read() / sint(2))
        t.write(t.read() + sint(1))
	    return i

    k = MemValue(cint(0))
    @while_do(lambda i: (k.read() < cint(128)), regint(0))
    def loop_body(i):
        ran = sint.get_random_int(num_bits)
        val = MemValue(pow(ran, mem_s.read(), n))
        if_then((val != sint(1)).reveal())
        index = MemValue(cint(0))
        print_ln("%s", "About to hit inner loop of rabin miller")
        @while_do(lambda j: val != n - 1, regint(0))
        def f(j):
            if_then(index.read() == t.read() - 1)
            is_prime.write(sint(0))
            else_then()
            index.write(index.read() + cint(1))
            val.write(pow(val.read(), sint(2), n))
            end_if()
            return j
        end_if()
        k.write(k.read() + 2)
        return i
    print_ln("Where is the error")
    return is_prime.read()



# Generate a prime of n bits
def generate_prime(n, num_bits):
    # testing mode, later change to 10 * n
    num_iterations = 10
    prime = MemValue(cint(0))
    @for_range(num_iterations)
    def loop_body(i):
    random_num = sint.get_random_triple()[0].reveal()
    if_then(isPrime(random_num, num_bits) == cint(1))
    prime.write(random_num)
    print_ln("%s", random_num)
    end_if()
    return prime





# Write public keys to files, write shares of private keys to files as well
def main():
    prime_length = 128
    num_bits = 128
    prime = generate_prime(prime_length, num_bits)
    print_ln("%s", prime)

main()


"""
a = sint(3)
b = sint(5)
n = sint(23)
@for_range(10)
def loop_body(i):
    print_ln("Hello World")
print_ln("%s", spow(a, b, n).reveal())
"""